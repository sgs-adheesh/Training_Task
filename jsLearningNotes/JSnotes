JAVASCRIPT TUTORIALS

*! USE NOTEPAD++ FOR BETTER READING EXPERIENCE.

https://www.youtube.com/watch?v=SajRjc9KKUE&list=PL0Zuz27SZ-6Oi6xNtL_fwCrwpuqylMsgT

https://developer.mozilla.org/en-US/docs/Learn/JavaScript

DAY 1:



->DATA TYPES:



1.string -> "",''
		typeof keyword ->typeof("adheesh") or typeof "adheesh"->o/p->string
		
2.number
3.boolean
4.undefined



->VARIABLE DECLARATION:



	let myName; -->camelcase,and let is the keyword
	typeof myName --> undefined

	var,let,const -->keywords



->OPERATORS:



	+ operator work for concatenation also.
	let number=20;
	let name="adhee";
	let res=number + name;
	typeof res --> string

	let myBool = number===20;
	typeof myBool -->boolean
	myBool->true

	==	equal to
	===	equal value and equal type
	!=	not equal
	!==	not equal value or not equal type
	>	greater than
	<	less than
	>=	greater than or equal to
	<=	less than or equal to
	?	ternary operator

	<script src=""></script> -->using this tag we can write js code inside html



->STRING METHODS:



1.length
						0 1 2 3 4 5 6
	const myVariable = "A d h e e s h"
	myVariable.length ->7

2.charAt(index pos)

	myVariable.charAt(0) ->A

3.indexOf("sequence")

	myVariable.indexOf("sh") ->5
	myVariable.indexOf("e") ->3 -->give the first exixting index value

4.lastIndexOf("sequence")

	myVariable.lastIndexOf("h") -->6

5.slice(start,end)

	myVariable.slice(1,4) -->dhe -->4 th char wont include
	myVariable.slice(5) --> sh -->no ending ,so it will slice all remaining after start index

	end>start

6.toUpperCase()

	myVariable.toUpperCase() --> ADHEESH

7.toLowerCase()

8.includes("string")

	myVariable.includes("eesh") --> true
	myVariable.includes("gha") -->false

9.split('char')

	myVariable.split('e') --> ["Adh" , "esh"]
	myVariable.split("") --> ["A","d","h","e","e","s","h"]

	"john,jacob,thomas".split(",") --> ["john" , "jacob" , "thomas"]

more reference:

	https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String
	https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Useful_string_methods



->NUMBER METHODS:


1.Number("string")

	let myStr="45"
	Number(myStr) --> 45 -->number type
	
	Number("adheesh") -->NaN ->Not a Number
	Number(undefined) -->NaN ->Not a Number
	Number(true) -->1
	Number(false) -->0
	
2.Number.isInteger("string")

	Number.isInteger(myStr) --> true
	Number.isInteger("34.09728") -->false
	Number.isInteger("hello") -->false
	
3.Number.parseFloat("string")

	Number.parseFloat("45.89") --> 45.89
	Number.parseFloat("123.45abc") -->123.45
	
4.Number.parseInt("string")
	
	Number.parseInt("455.17") -->455
	
5. toFixed(value)
	
	"123.4567".toFixed(2) --> "123.45" --> this toFixed method returns a string so 
	
6.toString()

	1234.toString() -->"1234"
	
*7. isNaN
	
	isNaN("adhee") --> true



->MATH LIBRARY:



1.Math.PI ->3.14765724875

2.Math.trunc(Math.PI) --> 3
  Math.trunc(3.4) --> 3
  Math.trunc(3.5) --> 3
  Math.trunc(3.7) --> 3

3.Math.round(Math.PI) --> 3
  Math.round(3.4) --> 3
  Math.round(3.5) --> 4
  Math.round(3.7) --> 4
  
4.Math.ceil(3.2) --> 4
  Math.ceil(3.5) --> 4
  Math.ceil(3.8) --> 4
  
5.Math.floor(3.2) --> 3
  Math.floor(3.5) --> 3
  Math.floor(3.8) --> 3
  
6.Math.pow(2,3) --> 2*2*2 = 8

7.Math.min(2,4,3,6,7) --> 2

8.Math.max(2,4,3,6,7) --> 7

9.Math.random() --> return a pseudo order number from 0 to 1 like 0.74757653276 , this range include 0 but not 1



->IF STATEMENTS:


same as other languages.



->SWITCH CASE:


same as other languages.

switch(condition){
	case 1:
		//code
		break;
	default:
		//codebreak;
}



->TERENARY OPERATION:



condition ? ifTrue : ifFalse

let soup="chicken soup"
let resp= soup ? "yes,we have soup" : "sorry we dont have soup" 
console.log(resp) --> "yes , we have soup"


let isCustBanned= true;
let newResp = isCustBanned ? "sorry, for you there is no soup : soup ? "yes, we have soup" : "sorry soup is over" ;

we can chain terenary operator like if else.

let testScore =76;
let grade = testScore>90 ? "A"
		  : testScore>80 ? "B"
		  : testScore>70 ? "C"
		  : testScore>60 ? "D"
		  : testScore>50 ? "P"
		  :"F" ;




DAY 2:



->USER INPUTS:


1.alert():

alert("hello user!")

	it will hault the browser until user click the "ok" button.
	it does'nt return anything.
	it is just a waiting.
	
	
2.confirm():

let myBool = confirm("Do you really want to share data?");

	it will give a box like alert ,but it contain both "ok" and "cancel"
	ok->true
	cancel->false
	confirm return boolean value.
	it is a confirmation from user.
	
	
3.prompt():

let name = prompt("please enter your name")

	it will directly taking input from user.
	you will get a input box as pop up.
	in this box there will be "ok" and "cancel".
	ok->it will take that entered input.
	cancel->it wont take input,so it will remain as null(name will be null)
	it can be string,number..anything.
	
	*if we press cancel then name will be null, so to manage that we could use Nullish Coalescing Operator.
	if we enter the name ,then it will show the name.
	if we press okay without entering the name,then name contain empty string.we could manage this using if statements.
	console.log(name ?? "you did'nt enter the name")
	
	?? -> Nullish Coalescing Operator
	
	
*location.reload() --> this mwthod will reload the browser.

	
	
->LOOPS:



1.while

		let number=0
		while(number<20){
			console.log(number);
			number++
		}
		
number++
number += 2


2.do while

		let number=0
		do{
			console.log(number);
			number++
		}while(number<20);


3.for loop

		for(let i=0;i<10;i++){
			console.log(i)
		}
		
		
		for(let i=0;i<10;){
			console.log(i)
			i++
		}
		
		
		let i=0;
		for(;i<10;i++){
			console.log(i)
		}
		
		
		let i=0;
		for(;i<10;){
			console.log(i)
			i++
		}
		
		
		let name="adheesh"
		for(let i=0;i<name.length;i++){
			console.log(name.charAt(i))
		}
		
		

->FUNCTIONS:


Methods => built in functions(example: length(), toLowerCase()...
  

declaration:

1. function sum(n1,n2){
		
		//body

   }
   
2. const getName = function(email){
		
		//body                   this is an anonymous function
				
   }
   

3. const res = (mark) => {

		//body                   this is arrow function
	
   }
   
   
 * All these work same
 
 
 
->VAR,LET,CONST


1.var
	* var x=1
	  var x=2
	  console.log(x) --> o/p = 2 , no error

2.let
	* let x=1
	  let x=2
	  console.log(x) --> error , let wont allow to re declare
	  
	  let x=1
		 x=2
		 console.log(x) --> o/p = 2
		 
3.const
	* const x=1
			x=2
		console.log(x) --> error due to re assign value of constant
		
		

->SCOPE:


Global and Local Scope of var,let,const

var a = 1
let b = 2
const c = 3


//global scope
console.log("global")
    console.log(a); // o/p => 1
    console.log(b); // o/p => 2
    console.log(c); // o/p => 3

{
	//block local scope ( ie, {} is block)
    var a = 5
    let b = 6
    const c = 7
    console.log("Local")
    console.log(a); // o/p => 5
    console.log(b); // o/p => 6
    console.log(c); // o/p => 7
    
}
function fun(){
	//function local scope 
    var a = 5
    let b = 6
    const c = 7
    console.log("Local")
    console.log(a); // o/p => 5
    console.log(b); // o/p => 6
    console.log(c); // o/p => 7
}
fun()


//global scope
console.log("global")
    console.log(a); // o/p => 5
    console.log(b); // o/p => 2
    console.log(c); // o/p => 3
	

 *! avoid using var , try to use let and const.
 
 


->ARRAYS:



const myArray = []

	myArray[0] = "adhee"
	myArray[1] = 1000
	myArray[2] = true

	console.log(myArray) --> [ "adhee" , 1000 , true ]
	
const newLen = myArray.push("hello")
console.log(myArray) --> [ "adhee" , 1000 , true , "hello" ]
console.log(newLen) --> 4

const lastItem = myArray.pop()
console.log(myArray) --> [ "adhee" , 1000 , true ]
console.log(lastItem) --> "hello"

const newLen = myArray.unshift(250)
console.log(myArray) --> [ 250 , "adhee" , 1000 , true ]
console.log(newLen) --> 4

const firstItem = myArray.shift()
console.log(myArray) --> [ "adhee" , 1000 , true ]
console.log(firstItem) --> 250

delete myArray[1]
console.log(myArray) --> [ "adhee" , empty , true ]
console.log(myArray[1]) --> undefined

myArray.splice(1,1)
splice starting index
number of element should have splice
console.log(myArray) --> [ "adhee" , true ]
console.log(myArray[1]) --> true

myArray.splice(1,1,42)
console.log(myArray) --> [ "adhee" , 42 , true ]
console.log(myArray[1]) --> 42

myArray.splice(1,0,1000)
console.log(myArray) --> [ "adhee" , 1000 , 42 , true ]
console.log(myArray[1]) --> 1000

		     0     1     2     3     4     5
let arr = [ "A" , "B" , "C" , "D" , "E" , "F" ]

let newarr = arr.slice(2) 
console.log(newarr) => [ "C" , "D" , "E" , "F" ]

newarr = arr.slice(2,5)
console.log(newarr) => [ "C" , "D" , "E" ]

arr.reverese()
console.log(arr) => [ "F" , "E" , "D" , "C" , "B" , "A" ]

const str = arr.join()
console.log(str) => A,B,C,D,E,F ->string and , between char and , is part of the string

const newArr = str.split(",")
console.log(newArr) => [ "A" , "B" , "C" , "D" , "E" , "F" ]

const arrA = [ 1,2,3 ]
const arrB = [ 4,5,6 ]
const newarr = arrA.concat(arrB)
console.log(newarr) => [1,2,3,4,5,6]

Spread operator:

const arrA = [ 1,2,3 ]
const arrB = [ 4,5,6 ]

const newarr = [ ...arrA, ...arrB ]
console.log(newarr) => [1,2,3,4,5,6]


DAY 3:


-> OBJECTS:


key-value pair

const myObj = {
				name : "Adheesh",
				age  : 24,
				place: "chennai"
			  }
			  
console.log(myObj.name) => Adheesh

const anotherObj = {
					  isAlive : true,
					  answer : 42,
					  hobbies : [ "football","music","code"],
					  beverages: {
									morning : "coffee",
									afternoon : "coke"
								 },
					  action : function(){
								 return "hello"
							   },
					  funAns : function () {
								 return `the answer is ${this.answer}`
							   }
				   }
console.log(anotherObj.isAlive) or console.log(anotherObj["isAlive"]) => true
console.log(anotherObj.hobbies[0]) => football
console.log(anotherObj.beverages.morning) => coffee
console.log(anotherObj.action()) => hello


const vehicle = {
					wheels : 4,
					engine : function(){
								return "vroom"
							}
			    }
				
const truck = Object.create(vehicle) => inheritance

truck.doors = 2 // adding property door for truck object

console.log(truck) => doors : 2 //it wont show the wheels and engine()
console.log(truck.wheels) => 4 // inheritance
console.log(truck.engine()) => vroom //inheritance


const car = Object.create(vehicle)
car.door = 4
car.engine = function (){
				return "whooops"
			}
console.log(car.wheels) => 4 //inherited from vehicle
console.log(car.engine()) => whooops // car object engine () overrided , so vehicle engine() is hidden


const tesla = Object.create(car)
console.log(tesla.wheels) => 4 //inherited from vehicle (multi level inheritance)
console.log(tesla.engine()) => whooops // tesla is based on the car object

tesla.engine = function (){
				return "shooooos"
			}

console.log(tesla.engine()) => shooooos //overrided


const band = {
				vocal : "jacob",
				guitar : "john",
				violin : "sebastian",
				drum : "nikolas"
			} 
			
console.log(Object.keys(band)) => ["vocal","guitar","violin","drum"]
console.log(Object.values(band)) => ["jacob","john","sebastian","nikolas"]

for(let job in band){
	console.log(`on ${job} it is ${band[job]}`)
}

o/p =>
		on vocal it is jacob
		on guitar it is john
		on violin it is sebastian
		on drum it is nikolas
		

object destructuring:

const {guitar : hey , vocal : hello} = band

console.log(hey) =>john
console.log(hello) =>jacob

const {guitar,vocal,violin,drum} = band

console.log(guitar) =>john
console.log(vocal) =>jacob



->CLASS :

class pizza{
	
	constructor(pizzaType,pizzaSize,pizzaCrust) {
		
		this.type=pizzaType;
		this.size=pizzaSize;
		this.crust=pizzaCrust;
		this.toppings=[]
	
	}
	
	getType(){
		return this.type
	}
	setType(type){
		this.type=type
	}
	
	getSize(){
		return this.size
	}
	setSize(size){
		this.size=size
	}
	
	getCrust(){
		return this.crust
	}
	setCrust(crust){
		this.crust=crust
	}
	
	getToppings(){
		return this.toppings
	}
	
	setToppings(topping){
		this.toppings.push(topping)
	}
	
	bake(){
	
		console.log(`Baking a ${this.type} type, ${this.size} ${this.crust} crust pizza`)
	
	}

}

const myPizza = new pizza("pepperoni","medium","original")
myPizza.bake()

console.log(myPizza.getCrust()) => original

myPizza.setCrust("thin")


class pizza{
	
	constructor(pizzaType,pizzaSize) {
		
		this.type=pizzaType;
		this.size=pizzaSize;
	
	}
	
	getType(){
		return this.type
	}
	setType(type){
		this.type=type
	}
	getSize(){
		return this.size
	}
	setSize(size){
		this.size=size
	}
	
}

class SpecialPizza extends pizza {

	constructor(pizzatype,pizzaSize,pizzaSlices){
		super(pizzaType,pizzaSize)
		this.slice=pizzaSlices
	}
	
	slicing(){
		console.log(`our ${this.type} ,${this.size} pizza has ${this.slice} slices`)
	}

}

const mySpecPizza = new SpecialPizza("pepperoni","medium",8)
mySpecPizza.slicing() => our pepperoni ,medium pizza has 8 slices




this._type=pizzaType;
this._size=pizzaSize;
this._crust=pizzaCrust;

getType(){
		return this._type
	}
	setType(type){
		this._type=type
	}
	
	getSize(){
		return this._size
	}
	setSize(size){
		this._size=size
	}
	
	getCrust(){
		return this._crust
	}
	setCrust(crust){
		this._crust=crust
	}

*underscore is to identify the member as private but now it is not needed !



class pizza{
	type;  //public
	#size; //private , # infront of varriable
	#slice=8; //private
	constructor(pizzaType,pizzaSize) {
		
		this.type=pizzaType;
		this.#size=pizzaSize;
	
	}
	
	getType(){
		return this.type
	}
	setType(type){
		this.type=type
	}
	getSize(){
		return this.#size
	}
	setSize(size){
		this.#size=size
	}
	
}




->JSON :


const myObj = {

	name : "adhee",
	age : 24,
	place : "chennai"


}

const sendJSON = JSON.stringify(myObj) => {
											"name":"adhee",
											"age":24,
											"place":"chennai"
										  }

const respJSON = JSON.parse(sendJSON) =>  {
											name : "adhee",
											age : 24,
											place : "chennai"
										  }
										  
									
									
->ERRORS AND ERROR HANDLING :
	
	
"use strict"  //strict mode 
 
 myVar = "hello";
 console.log(myVar) o/p => error,because we used strict mode,so we have to give variable keyword . ie, const myVar
						   if there is no "use strict",then this will work fine without variable keyword.
						   




const makeError=()=>{
	
	try{
		const var = "dave";
		var="john"; //Type error:reassigning const var
	}
	catch(err){
		console.error(err.stack)
	}
	
}

makeError()


custome error handling:

const makeError=()=>{
	
	try{
		throw new customeError("this is a custome error")
	}
	catch(err){
		console.error(err.stack)
	}
	
}

function customeError(message) {
	this.message=message
	this.name="customeError"
	this.stack=`${this.name}:${this.message}`
}


-> Js DOM :

const view1 = document.getElementById("view1")
or
const view2 = document.querySelector("#view2")


-> EVENT LISTENER :


const h2 = div.querySelector("h2")

const doSomething=()=>{
	alert("hello")
}

h2.addEventListener("click" , doSomething, false) --> default is false



event.stopPropagation() ->stop delegate from one event to adjacent event




->WEB STORAGE API :

SESSION STORAGE: it will only stay for the particular session

	const obj = {
	
		name : "adhee",
		logName : function(){
					console.log(this.name)
				}
	
	}
	
	
	const myArr = ["eat","sleep","work"]
	
	
	sessionStorage.setItem("myStore",obj)
	const myData = sessionStorage.getItem("myStore")
	console.log(myData) => it will be in this string format
							session storage always tries to store every type as string.
							
	sessionStorage.setItem("myStore",myArr)
	const myData = sessionStorage.getItem("myStore")
	console.log(myData) => it will be in this string format
	console.log(typeof myData) => string
	
	
so,
	sessionStorage.setItem("myStore",JSON.stringify(obj)) // it will store as string , but in the format of json
	const myData = JSON.parse(sessionStorage.getItem("myStore")) // it will parse the string that of json format into object.
	console.log(myData) => Now it will be an object
	console.log(typeof myData) =>object
	
	
	sessionStorage.setItem("myStore",JSON.stringfy(myArr))
	const myData = JSON.parse(sessionStorage.getItem("myStore"))
	console.log(myData) => array => ["eat","sleep","work"]
	console.log(typeof myData) => array
	
	
LOCAL STORAGE : it will stay even if we close the website/browser

	
	localStorage.setItem("myStore",JSON.stringify(obj)) // it will store as string , but in the format of json
	const myData = JSON.parse(localStorage.getItem("myStore")) // it will parse the string that of json format into object.
	console.log(myData) => Now it will be an object
	console.log(typeof myData) =>object
	
	
	localStorage.setItem("myStore",JSON.stringfy(myArr))
	const myData = JSON.parse(localStorage.getItem("myStore"))
	console.log(myData) => array => ["eat","sleep","work"]
	console.log(typeof myData) => array
	
	
	localStorage.removeItem("myStore")
	localStorage.clear() // it will remove all the localStorage
	
	


->MODULES :

EXPORT AND IMPORT SYNTAX:

every module can have one export default.

EXPORT:
1 way:

const play=()=>{
	return "play"
}

const sleep=()=>{
	return "sleep"
}

const eat=()=>{
	return "eat"
}

export default play;

export {sleep,eat}

2nd way:

export default function play(){ //for deafult export we have to use function keyword type function , not arrow function
	return "play"
}

export const sleep=()=>{ //for normal export we can use arrow function
	return "sleep"
}

export const eat=()=>{
	return "eat"
}

IMPORT:

import play from "./file.js"
import {sleep,eat} from "./file.js"

renaming the imported functions: as keyword

import {sleep as sl,eat as e} from "./file.js"


import * as myroutine from "./file.js" //importing all function

myroutine.play() // it wont work because this is a default function, so we have to call like -> myroutine.default()
myroutine.sleep()
myroutine.eat()



export default class Users{
	constructor(email,name){
		this._email=email
		this._name=name
	}
	greeting(){
		return `hey ${this.-name} your reg email is ${this.-email}`
	}
	
}



->HIGHER ORDER FUNCTIONS:
	=> a higher order function is a function that does atleast one of the following
		
		1.take one or more function as argument
		2.return a function as result
		
	
1. forEach

	posts.forEach(post => {
		console.log(post)
	})
	
2.filter

	const filteredPost = posts.filter(post =>{
							return post.usereId===2
						})
						
	it will return the post of userId 2 to the varriable filteredPost
	
3.map

	const mappedPost = filteredPost.map( post => {
							return post.id * 10
						})
	it will return the post id mapped to the mappedPost based on the given logic
	
4.reduce

	const reducedPostValue =  mappedPost.reduce((sum,post)=>{
						return sum + post
					})
					
					



->FETCH API :

	=>Callback , Promises , Thenables , Async , Await
	
	
CALLBACK:
	
	function firstFunction(parameter,callback){
		//do stufff
		callback()
	}
	
	//callback hell
	firstFunction(para , function(){
		//do stuff
		secondFunction(para ,function(){
			thirdFunction(para, function(){
			
			
			})
		})
	})
	
	
 JAVASCRIPT IS SYNCHRONOUS , ie, DOING ONE THING AT A TIME, NO THREAD
 
 
 to get rid of this callback hell  use promises.

 
PROMISES:

	3 states : pending , fullfilled , rejected
	
	JS is usually synchronous,but promises return async code.
	
-FULLFILLED
	
const myPromise = new Promise((resolve,reject)=>{
	const error = false;
	if(!error){
		resolve("yes ! promise revolved")
	}
	else{
		reject("no ! promise rejected")
	}
})

console.log(myPromise) // it wont give the value, it will give the state only => state : fullfilled

for getting the value, we have to do promise chaining using then

myPromise.then(value => {
	console.log(value) // it will give the value => value : yes ! promise revolved
})


myPromise.then(value => {
	return value + 10
}).then((newValue) => {
	return newValue + 20
}).then((finalValue) => {
	console.log(finalValue) // o/p => yes ! promise revolved1020
})

this is chaining.

-REJECTED:

when error happened , ie, error = true

const myPromise = new Promise((resolve,reject)=>{
	const error = true;
	if(!error){
		resolve("yes ! promise revolved")
	}
	else{
		reject("no ! promise rejected")
	}
})

console.log(myPromise) // it wont give the value, it will give the state only => state : rejected

for getting the value, we have to do promise chaining using then 
ie , Thenable chaning

myPromise.then(value => {
	console.log(value) 
}).catch(err => {
	console.error(err) // no ! promise rejected 
})


myPromise.then(value => {
	return value + 10
}).then((newValue) => {
	return newValue + 20
}).then((finalValue) => {
	console.log(finalValue)
}).catch(err =>{
	console.error(err) // no ! promise rejected 
})

-PENDING

const myPromise = new Promise((resolve,reject)=>{
	const error = false;
	if(!error){
		resolve("yes ! promise revolved")
	}
	else{
		reject("no ! promise rejected")
	}
})

const myNextPromise = new Promise((resolve,reject)=>{
	setTimeOut(function (){
		console.log("my next promise!")
	},3000)
})

myNextPromise.then(value => {
	console.log(value) 
}).catch(err => {
	console.error(err)
})

myPromise.then(value => {
	console.log(value) 
}).catch(err => {
	console.error(err) 
})

output => yes ! promise revolved
		  my next promise!
		  
		  because the myNextPromise was pending due to timeout so the myPromise executed first
		  
		  
		  


const users = fetch("http://application/user")

console.log(users) =>o/p : pending state

we have to take the promise of fetch api

fetch("http://application/user")
.then(resp =>{
	console.log(resp) // it will be in the form of readable stream, so we have to change it into json
	return resp.json() // json format
})
.then(data =>{
	console.log(data) //json
	data.forEach(user =>{
		console.log(user) // print each user separately
	})
})


const users = fetch("http://application/user")
.then(resp =>{
	console.log(resp) // it will be in the form of readable stream, so we have to change it into json
	return resp.json() // json format
})
.then(data =>{
	console.log(data) //json
	data.forEach(user =>{
		console.log(user) // print each user separately
	})
})

console.log(users)

o/p=>
	pending state // why it is executed first? because it wont wait for promises to execute
	users,it is actually a promise, so it will go first and so it will tell js to execute the reamining and come back because promise is pending.
	
	
-ASYNC, AWAIT

	const myUser = {
		userList: []
	}
	
	const myFirstFunc = async () =>{
		const resp = await fetch("http://application/user")
		const jsonData = await resp.json()
		return jsonData
	}
	
	const mySecondFunc = async () =>{
		const data = await myFirstFunc()
		myUser.userList = data
		console.log(myUser.userList)
	}
	
	mySecondFunc() // this will execute after
	console.log(myUser.userList) // this will execute first , so o/p will be empty list : []
	
	
	
-FETCH

	const getData = async () =>{
		const resp = await fetch("http://application/user",{
			method : "GET",
			headers : {
						Accept : "application/json"
					 }
		})
		
		const jsonData = await resp.json()
		
		console.log(jsonData)
	}
	
	getData()
	
	
	
	
	
	const object = {
		id : "765euguet3",
		data : "hello teammates how are you"
	}
	const postData = async (obj) =>{
		const resp = await fetch("http://application/user",{
			method : "POST",
			headers : {
						Content-Type : "application/json"
					  }
			body : JSON.stringify(obj)
		})
		
		const jsonResponse = await resp.json()
		
		console.log(jsonResponse)
	}
	
	postData(object)